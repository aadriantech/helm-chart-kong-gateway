COMPUTED VALUES:
admin:
  annotations: {}
  enabled: true
  http:
    containerPort: 8001
    enabled: true
    parameters: []
    servicePort: 8001
  ingress:
    annotations: {}
    enabled: false
    hostname: null
    ingressClassName: null
    path: /
    pathType: ImplementationSpecific
  labels: {}
  loadBalancerClass: null
  tls:
    client:
      caBundle: ""
      secretName: ""
    containerPort: 8444
    enabled: true
    parameters:
    - http2
    servicePort: 8444
  type: NodePort
autoscaling:
  behavior: {}
  enabled: false
  maxReplicas: 5
  metrics:
  - resource:
      name: cpu
      target:
        averageUtilization: 80
        type: Utilization
    type: Resource
  minReplicas: 2
  targetCPUUtilizationPercentage: null
certificates:
  admin:
    clusterIssuer: ""
    commonName: kong.example
    dnsNames: []
    enabled: true
    issuer: ""
  cluster:
    clusterIssuer: ""
    commonName: kong_clustering
    dnsNames: []
    enabled: true
    issuer: ""
  clusterIssuer: ""
  enabled: false
  issuer: ""
  portal:
    clusterIssuer: ""
    commonName: developer.example
    dnsNames: []
    enabled: true
    issuer: ""
  proxy:
    clusterIssuer: ""
    commonName: app.example
    dnsNames: []
    enabled: true
    issuer: ""
cluster:
  annotations: {}
  enabled: false
  ingress:
    annotations: {}
    enabled: false
    hostname: null
    ingressClassName: null
    path: /
    pathType: ImplementationSpecific
  labels: {}
  loadBalancerClass: null
  tls:
    containerPort: 8005
    enabled: false
    parameters: []
    servicePort: 8005
  type: ClusterIP
clusterCaSecretName: ""
clustertelemetry:
  annotations: {}
  enabled: false
  ingress:
    annotations: {}
    enabled: false
    hostname: null
    ingressClassName: null
    path: /
    pathType: ImplementationSpecific
  labels: {}
  loadBalancerClass: null
  tls:
    containerPort: 8006
    enabled: false
    parameters: []
    servicePort: 8006
  type: ClusterIP
containerSecurityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000
  seccompProfile:
    type: RuntimeDefault
dblessConfig:
  config: ""
  configMap: ""
  secret: ""
deployment:
  daemonset: false
  hostNetwork: false
  hostname: ""
  kong:
    enabled: true
  prefixDir:
    sizeLimit: 256Mi
  serviceAccount:
    automountServiceAccountToken: false
    create: true
  test:
    enabled: false
  tmpDir:
    sizeLimit: 1Gi
deploymentAnnotations: {}
enterprise:
  enabled: false
  portal:
    enabled: false
  rbac:
    admin_gui_auth: basic-auth
    admin_gui_auth_conf_secret: CHANGEME-admin-gui-auth-conf-secret
    enabled: false
    session_conf_secret: kong-session-config
  smtp:
    admin_emails_from: none@example.com
    admin_emails_reply_to: none@example.com
    auth:
      smtp_password_secret: CHANGEME-smtp-password
      smtp_username: ""
    enabled: false
    portal_emails_from: none@example.com
    portal_emails_reply_to: none@example.com
    smtp_admin_emails: none@example.com
    smtp_auth_type: ""
    smtp_host: smtp.example.com
    smtp_port: 587
    smtp_ssl: nil
    smtp_starttls: true
  vitals:
    enabled: true
env:
  admin_access_log: /dev/stdout
  admin_error_log: /dev/stderr
  admin_gui_access_log: /dev/stdout
  admin_gui_error_log: /dev/stderr
  database: "off"
  nginx_worker_processes: "2"
  portal_api_access_log: /dev/stdout
  portal_api_error_log: /dev/stderr
  prefix: /kong_prefix/
  proxy_access_log: /dev/stdout
  proxy_error_log: /dev/stderr
  router_flavor: traditional
envFrom: []
extraConfigMaps: []
extraLabels: {}
extraObjects: []
extraSecrets: []
image:
  effectiveSemver: null
  pullPolicy: IfNotPresent
  repository: kong
  tag: "3.6"
ingressController:
  adminApi:
    tls:
      client:
        caSecretName: ""
        certProvided: false
        enabled: false
        secretName: ""
  admissionWebhook:
    certificate:
      provided: false
    enabled: true
    failurePolicy: Ignore
    filterSecrets: false
    namespaceSelector: {}
    port: 8080
    service:
      labels: {}
  args: []
  enabled: true
  env:
    kong_admin_tls_skip_verify: true
  envFrom: []
  gatewayDiscovery:
    adminApiService:
      name: ""
      namespace: ""
    enabled: false
    generateAdminApiService: false
  image:
    effectiveSemver: null
    repository: kong/kubernetes-ingress-controller
    tag: "3.2"
  ingressClass: kong
  ingressClassAnnotations: {}
  installCRDs: false
  konnect:
    apiHostname: us.kic.api.konghq.com
    enabled: false
    license:
      enabled: false
    runtimeGroupID: ""
    tlsClientCertSecretName: konnect-client-tls
  livenessProbe:
    failureThreshold: 3
    httpGet:
      path: /healthz
      port: 10254
      scheme: HTTP
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  rbac:
    create: true
  readinessProbe:
    failureThreshold: 3
    httpGet:
      path: /readyz
      port: 10254
      scheme: HTTP
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  resources: {}
  watchNamespaces: []
lifecycle:
  preStop:
    exec:
      command:
      - kong
      - quit
      - --wait=15
livenessProbe:
  failureThreshold: 3
  httpGet:
    path: /status
    port: status
    scheme: HTTP
  initialDelaySeconds: 5
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 5
manager:
  annotations: {}
  enabled: true
  http:
    containerPort: 8002
    enabled: true
    parameters: []
    servicePort: 8002
  ingress:
    annotations: {}
    enabled: true
    hostname: kong-manager.local
    ingressClassName: null
    path: /
    pathType: ImplementationSpecific
  labels: {}
  loadBalancerClass: null
  tls:
    containerPort: 8445
    enabled: true
    parameters:
    - http2
    servicePort: 8445
  type: NodePort
migrations:
  annotations:
    sidecar.istio.io/inject: false
  backoffLimit: null
  jobAnnotations: {}
  postUpgrade: true
  preUpgrade: true
  resources: {}
nodeSelector: {}
plugins: {}
podAnnotations:
  kuma.io/gateway: enabled
  traffic.sidecar.istio.io/includeInboundPorts: ""
podDisruptionBudget:
  enabled: false
podLabels: {}
podSecurityPolicy:
  annotations: {}
  enabled: false
  labels: {}
  spec:
    allowPrivilegeEscalation: false
    fsGroup:
      rule: RunAsAny
    hostIPC: false
    hostNetwork: false
    hostPID: false
    privileged: false
    readOnlyRootFilesystem: true
    runAsGroup:
      rule: RunAsAny
    runAsUser:
      rule: RunAsAny
    seLinux:
      rule: RunAsAny
    supplementalGroups:
      rule: RunAsAny
    volumes:
    - configMap
    - secret
    - emptyDir
    - projected
portal:
  annotations: {}
  enabled: true
  http:
    containerPort: 8003
    enabled: true
    parameters: []
    servicePort: 8003
  ingress:
    annotations: {}
    enabled: false
    hostname: null
    ingressClassName: null
    path: /
    pathType: ImplementationSpecific
  labels: {}
  loadBalancerClass: null
  tls:
    containerPort: 8446
    enabled: true
    parameters:
    - http2
    servicePort: 8446
  type: NodePort
portalapi:
  annotations: {}
  enabled: true
  http:
    containerPort: 8004
    enabled: true
    parameters: []
    servicePort: 8004
  ingress:
    annotations: {}
    enabled: false
    hostname: null
    ingressClassName: null
    path: /
    pathType: ImplementationSpecific
  labels: {}
  loadBalancerClass: null
  tls:
    containerPort: 8447
    enabled: true
    parameters:
    - http2
    servicePort: 8447
  type: NodePort
postgresql:
  auth:
    database: kong
    username: kong
  enabled: false
  image:
    tag: 13.11.0-debian-11-r20
  service:
    ports:
      postgresql: "5432"
priorityClassName: ""
proxy:
  annotations: {}
  enabled: true
  http:
    containerPort: 8000
    enabled: true
    parameters: []
    servicePort: 80
  ingress:
    annotations: {}
    enabled: false
    hostname: null
    hosts: []
    ingressClassName: null
    labels: {}
    path: /
    pathType: ImplementationSpecific
  labels:
    enable-metrics: "true"
  loadBalancerClass: null
  nameOverride: ""
  stream: []
  tls:
    appProtocol: ""
    containerPort: 8443
    enabled: true
    parameters:
    - http2
    servicePort: 443
  type: LoadBalancer
readinessProbe:
  failureThreshold: 3
  httpGet:
    path: /status/ready
    port: status
    scheme: HTTP
  initialDelaySeconds: 5
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 5
replicaCount: 1
resources: {}
secretVolumes: []
securityContext: {}
service:
  type: ClusterIP
serviceMonitor:
  enabled: false
status:
  enabled: true
  http:
    containerPort: 8100
    enabled: true
    parameters: []
  tls:
    containerPort: 8543
    enabled: false
    parameters: []
terminationGracePeriodSeconds: 30
tolerations: []
udpProxy:
  annotations: {}
  enabled: false
  labels: {}
  loadBalancerClass: null
  stream: []
  type: LoadBalancer
updateStrategy: {}
waitImage:
  enabled: true
  pullPolicy: IfNotPresent